// src/components/generateLoanStatement.ts

import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

// Patch TypeScript to recognize lastAutoTable
import "jspdf";
declare module "jspdf" {
  interface jsPDF {
    lastAutoTable?: {
      finalY?: number;
    };
  }
}

export const generateLoanStatement = ({
  userName,
  loanId,
  loanAmount,
  emiSchedule,
  repaymentHistory,
}: {
  userName: string;
  loanId: string;
  loanAmount?: number; // ✅ Optional now
  emiSchedule: any[];
  repaymentHistory: any[];
}) => {
  const doc = new jsPDF();

  // ✅ Calculate loanAmount if not passed
  const calculatedLoanAmount =
    loanAmount ??
    emiSchedule.reduce((sum, emi) => sum + (emi.amount || 0), 0);

  // Add watermark
  doc.setTextColor(230);
  doc.setFontSize(60);
  doc.text("CONFIDENTIAL", 35, 150, { angle: 45 });
  doc.setTextColor(0); // Reset to black

  const logo = new Image();
  logo.src = "/assets/Screenshots/logo.png"; // Must be in public folder

  logo.onload = () => {
    // Create circular logo using canvas
    const canvas = document.createElement("canvas");
    const size = 40;
    canvas.width = size;
    canvas.height = size;
    const ctx = canvas.getContext("2d")!;
    ctx.beginPath();
    ctx.arc(size / 2, size / 2, size / 2, 0, Math.PI * 2);
    ctx.closePath();
    ctx.clip();
    ctx.drawImage(logo, 0, 0, size, size);

    const circularLogo = new Image();
    circularLogo.src = canvas.toDataURL("image/png");

    circularLogo.onload = () => {
      doc.addImage(circularLogo, "PNG", 14, 10, 20, 20);

      // Title
      doc.setFont("times", "bold");
      doc.setFontSize(20);
      doc.text("Loan Statement", 40, 20);

      doc.setFont("times", "normal");
      doc.setFontSize(12);
      doc.text(`Name: ${userName}`, 14, 35);
      doc.text(`Loan ID: ${loanId}`, 14, 41);
      doc.text(
        `Loan Amount: ₹${calculatedLoanAmount.toLocaleString()}`,
        14,
        47
      );
      doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 53);

      // Repayment History Table
      autoTable(doc, {
        startY: 65,
        head: [["Date", "Amount Paid", "Status"]],
        body: repaymentHistory.map((item) => [
          item.date || "-",
          `₹${item.amount.toLocaleString()}`,
          item.status,
        ]),
        theme: "grid",
        styles: { fontSize: 11, cellPadding: 3, font: "times" },
        headStyles: {
          fillColor: [39, 174, 96],
          textColor: 255,
          halign: "center",
        },
      });

      const finalY = doc.lastAutoTable?.finalY || 90;

      // EMI Schedule Table
      autoTable(doc, {
        startY: finalY + 10,
        head: [["EMI #", "Due Date", "EMI Amount", "Status"]],
        body: emiSchedule.map((emi, i) => [
          `EMI ${i + 1}`,
          emi.dueDate || "-",
          `₹${emi.amount.toLocaleString()}`,
          emi.status || "Pending",
        ]),
        theme: "striped",
        styles: { fontSize: 11, cellPadding: 3, font: "times" },
        headStyles: {
          fillColor: [52, 152, 219],
          textColor: 255,
          halign: "center",
        },
      });

      // Signature Line
      const yAfterEMIs = doc.lastAutoTable?.finalY || 230;
      doc.setDrawColor(150);
      doc.line(14, yAfterEMIs + 20, 80, yAfterEMIs + 20);
      doc.setFontSize(11);
      doc.setTextColor(50);
      doc.text("Authorized Signature", 14, yAfterEMIs + 26);

      // Footer
      doc.setFontSize(10);
      doc.setTextColor(120);
      doc.setFont("times", "italic");
      doc.text(
        "Generated by Loan App · https://loanapp.com · contact@loanapp.com",
        14,
        285
      );

      doc.save(`LoanStatement_${loanId}.pdf`);
    };
  };

  logo.onerror = () => {
    console.warn("Logo failed to load. Proceeding without logo.");

    doc.setFont("times", "bold");
    doc.setFontSize(20);
    doc.text("Loan Statement", 14, 20);

    doc.setFont("times", "normal");
    doc.setFontSize(12);
    doc.text(`Name: ${userName}`, 14, 35);
    doc.text(`Loan ID: ${loanId}`, 14, 41);
    doc.text(
      `Loan Amount: ₹${calculatedLoanAmount.toLocaleString()}`,
      14,
      47
    );
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 53);

    autoTable(doc, {
      startY: 65,
      head: [["Date", "Amount Paid", "Status"]],
      body: repaymentHistory.map((item) => [
        item.date || "-",
        `₹${item.amount.toLocaleString()}`,
        item.status,
      ]),
      theme: "grid",
      styles: { fontSize: 11, cellPadding: 3, font: "times" },
      headStyles: {
        fillColor: [39, 174, 96],
        textColor: 255,
        halign: "center",
      },
    });

    const y = doc.lastAutoTable?.finalY || 90;
    autoTable(doc, {
      startY: y + 10,
      head: [["EMI #", "Due Date", "EMI Amount", "Status"]],
      body: emiSchedule.map((emi, i) => [
        `EMI ${i + 1}`,
        emi.dueDate || "-",
        `₹${emi.amount.toLocaleString()}`,
        emi.status || "Pending",
      ]),
      theme: "striped",
      styles: { fontSize: 11, cellPadding: 3, font: "times" },
      headStyles: {
        fillColor: [52, 152, 219],
        textColor: 255,
        halign: "center",
      },
    });

    doc.setFontSize(11);
    doc.setTextColor(50);
    doc.line(14, 250, 80, 250);
    doc.text("Authorized Signature", 14, 256);

    doc.setFontSize(10);
    doc.setTextColor(120);
    doc.setFont("times", "italic");
    doc.text(
      "Generated by Loan App · https://loanapp.com · contact@loanapp.com",
      14,
      285
    );

    doc.save(`LoanStatement_${loanId}.pdf`);
  };
};